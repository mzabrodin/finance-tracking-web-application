import React, { useState } from 'react';
import '../styles/CalculatorsPage.css';
import Sidebar from '../components/Sidebar';
import '../styles/Sidebar.css';

const API_URL = 'http://localhost:5000';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ñ–≤ (–±–µ–∑ –∑–º—ñ–Ω)
const SavingsCalculator = () => {
  const [formData, setFormData] = useState({
    initial_sum: '',
    term_months: '',
    annual_rate: ''
  });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/api/calculators/savings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          initial_sum: parseFloat(formData.initial_sum),
          term_months: parseInt(formData.term_months),
          annual_rate: parseFloat(formData.annual_rate)
        })
      });

      const data = await response.json();
      if (response.ok) {
        setResult(data.data);
      } else {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      alert(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="calculator-card">
      <div className="calculator-header">
        <div className="calculator-icon savings">üí∞</div>
        <h3 className="calculator-title">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–æ—â–∞–¥–∂–µ–Ω—å</h3>
      </div>
      <form className="calculator-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ (–≥—Ä–Ω)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            value={formData.initial_sum}
            onChange={(e) => setFormData({...formData, initial_sum: e.target.value})}
            placeholder="10000"
            required
          />
        </div>
        <div className="form-group">
          <label>–¢–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ)</label>
          <input
            type="number"
            min="1"
            max="120"
            value={formData.term_months}
            onChange={(e) => setFormData({...formData, term_months: e.target.value})}
            placeholder="12"
            required
          />
        </div>
        <div className="form-group">
          <label>–†—ñ—á–Ω–∞ —Å—Ç–∞–≤–∫–∞ (%)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            max="100"
            value={formData.annual_rate}
            onChange={(e) => setFormData({...formData, annual_rate: e.target.value})}
            placeholder="5.5"
            required
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className="calculate-btn"
        >
          {loading ? (
            <>
              <div className="loading-spinner"></div>
              –û–±—á–∏—Å–ª–µ–Ω–Ω—è...
            </>
          ) : (
            '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏'
          )}
        </button>
      </form>
      {result && (
        <div className="calculator-result">
          <div className="result-header">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</div>
          <div className="result-value positive">
            {result.final_amount.toLocaleString('uk-UA')} –≥—Ä–Ω
          </div>
          <div className="result-details">
            <div className="result-detail">
              <span className="result-label">–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞:</span>
              <span className="result-amount">{parseFloat(formData.initial_sum).toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–ü—Ä–∏–±—É—Ç–æ–∫:</span>
              <span className="result-amount positive">{(result.final_amount - parseFloat(formData.initial_sum)).toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const CreditCalculator = () => {
  const [formData, setFormData] = useState({
    principal: '',
    annual_rate: '',
    term_months: ''
  });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showSchedule, setShowSchedule] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/api/calculators/credit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          principal: parseFloat(formData.principal),
          annual_rate: parseFloat(formData.annual_rate),
          term_months: parseInt(formData.term_months)
        })
      });

      const data = await response.json();
      if (response.ok) {
        setResult(data.data);
      } else {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      alert(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="calculator-card">
      <div className="calculator-header">
        <div className="calculator-icon credit">üè¶</div>
        <h3 className="calculator-title">–ö—Ä–µ–¥–∏—Ç–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h3>
      </div>
      <form className="calculator-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–°—É–º–∞ –∫—Ä–µ–¥–∏—Ç—É (–≥—Ä–Ω)</label>
          <input
            type="number"
            step="0.01"
            min="1"
            value={formData.principal}
            onChange={(e) => setFormData({...formData, principal: e.target.value})}
            placeholder="100000"
            required
          />
        </div>
        <div className="form-group">
          <label>–†—ñ—á–Ω–∞ —Å—Ç–∞–≤–∫–∞ (%)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            max="100"
            value={formData.annual_rate}
            onChange={(e) => setFormData({...formData, annual_rate: e.target.value})}
            placeholder="15"
            required
          />
        </div>
        <div className="form-group">
          <label>–¢–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ)</label>
          <input
            type="number"
            min="1"
            value={formData.term_months}
            onChange={(e) => setFormData({...formData, term_months: e.target.value})}
            placeholder="24"
            required
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className="calculate-btn"
        >
          {loading ? (
            <>
              <div className="loading-spinner"></div>
              –û–±—á–∏—Å–ª–µ–Ω–Ω—è...
            </>
          ) : (
            '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏'
          )}
        </button>
      </form>
      {result && (
        <div className="calculator-result">
          <div className="result-header">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</div>
          <div className="result-details">
            <div className="result-detail">
              <span className="result-label">–©–æ–º—ñ—Å—è—á–Ω–∏–π –ø–ª–∞—Ç—ñ–∂:</span>
              <span className="result-amount negative">{result.monthly_payment.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</span>
              <span className="result-amount negative">{result.total_payment.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–ü–µ—Ä–µ–ø–ª–∞—Ç–∞:</span>
              <span className="result-amount negative">{result.total_overpayment.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
          </div>
          <button
            onClick={() => setShowSchedule(!showSchedule)}
            className="schedule-toggle"
          >
            {showSchedule ? '–°—Ö–æ–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤'}
          </button>
          {showSchedule && (
            <div className="schedule-table">
              <table>
                <thead>
                  <tr>
                    <th>–ú—ñ—Å—è—Ü—å</th>
                    <th>–ü–ª–∞—Ç—ñ–∂</th>
                    <th>–û—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ä–≥</th>
                    <th>–í—ñ–¥—Å–æ—Ç–∫–∏</th>
                    <th>–ó–∞–ª–∏—à–æ–∫</th>
                  </tr>
                </thead>
                <tbody>
                  {result.payment_schedule.map((payment) => (
                    <tr key={payment.month}>
                      <td>{payment.month}</td>
                      <td>{payment.monthly_payment.toLocaleString('uk-UA')}</td>
                      <td>{payment.principal_payment.toLocaleString('uk-UA')}</td>
                      <td>{payment.interest_payment.toLocaleString('uk-UA')}</td>
                      <td>{payment.remaining_balance.toLocaleString('uk-UA')}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

const PensionCalculator = () => {
  const [formData, setFormData] = useState({
    initial_sum: '',
    monthly_contribution: '',
    annual_rate: '',
    term_years: ''
  });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/api/calculators/pension`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          initial_sum: parseFloat(formData.initial_sum) || 0,
          monthly_contribution: parseFloat(formData.monthly_contribution),
          annual_rate: parseFloat(formData.annual_rate),
          term_years: parseInt(formData.term_years)
        })
      });

      const data = await response.json();
      if (response.ok) {
        setResult(data.data);
      } else {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      alert(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="calculator-card">
      <div className="calculator-header">
        <div className="calculator-icon pension">üèõÔ∏è</div>
        <h3 className="calculator-title">–ü–µ–Ω—Å—ñ–π–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h3>
      </div>
      <form className="calculator-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞ (–≥—Ä–Ω) - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ</label>
          <input
            type="number"
            step="0.01"
            min="0"
            value={formData.initial_sum}
            onChange={(e) => setFormData({...formData, initial_sum: e.target.value})}
            placeholder="0"
          />
        </div>
        <div className="form-group">
          <label>–©–æ–º—ñ—Å—è—á–Ω–∏–π –≤–Ω–µ—Å–æ–∫ (–≥—Ä–Ω)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            value={formData.monthly_contribution}
            onChange={(e) => setFormData({...formData, monthly_contribution: e.target.value})}
            placeholder="1000"
            required
          />
        </div>
        <div className="form-group">
          <label>–°–µ—Ä–µ–¥–Ω—è —Ä—ñ—á–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            max="100"
            value={formData.annual_rate}
            onChange={(e) => setFormData({...formData, annual_rate: e.target.value})}
            placeholder="7"
            required
          />
        </div>
        <div className="form-group">
          <label>–¢–µ—Ä–º—ñ–Ω –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è (—Ä–æ–∫–∏)</label>
          <input
            type="number"
            min="1"
            max="60"
            value={formData.term_years}
            onChange={(e) => setFormData({...formData, term_years: e.target.value})}
            placeholder="30"
            required
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className="calculate-btn"
        >
          {loading ? (
            <>
              <div className="loading-spinner"></div>
              –û–±—á–∏—Å–ª–µ–Ω–Ω—è...
            </>
          ) : (
            '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏'
          )}
        </button>
      </form>
      {result && (
        <div className="calculator-result">
          <div className="result-header">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</div>
          <div className="result-value positive">
            {result.final_amount.toLocaleString('uk-UA')} –≥—Ä–Ω
          </div>
          <div className="result-details">
            <div className="result-detail">
              <span className="result-label">–í–Ω–µ—Å–µ–Ω–æ –≤—Å—å–æ–≥–æ:</span>
              <span className="result-amount">{result.total_contributions.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–î–æ—Ö—ñ–¥ –≤—ñ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π:</span>
              <span className="result-amount positive">{result.investment_income.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const TaxCalculator = () => {
  const [formData, setFormData] = useState({
    gross_salary: '',
    tax_rate: '18',
    military_tax: '1.5',
    social_contribution: '22'
  });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/api/calculators/tax`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          gross_salary: parseFloat(formData.gross_salary),
          tax_rate: parseFloat(formData.tax_rate),
          military_tax: parseFloat(formData.military_tax),
          social_contribution: parseFloat(formData.social_contribution)
        })
      });

      const data = await response.json();
      if (response.ok) {
        setResult(data.data);
      } else {
        throw new Error(data.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      alert(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="calculator-card">
      <div className="calculator-header">
        <div className="calculator-icon tax">üìä</div>
        <h3 className="calculator-title">–ü–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h3>
      </div>
      <form className="calculator-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–í–∞–ª–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ (–≥—Ä–Ω)</label>
          <input
            type="number"
            step="0.01"
            min="0"
            value={formData.gross_salary}
            onChange={(e) => setFormData({...formData, gross_salary: e.target.value})}
            placeholder="25000"
            required
          />
        </div>
        <div className="form-group">
          <label>–ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –¥–æ—Ö–æ–¥–∏ (%)</label>
          <select
            value={formData.tax_rate}
            onChange={(e) => setFormData({...formData, tax_rate: e.target.value})}
          >
            <option value="18">18% (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞)</option>
            <option value="5">5% (–¥–ª—è –§–û–ü)</option>
          </select>
        </div>
        <div className="form-group">
          <label>–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä (%)</label>
          <input
            type="number"
            step="0.1"
            min="0"
            max="10"
            value={formData.military_tax}
            onChange={(e) => setFormData({...formData, military_tax: e.target.value})}
            placeholder="1.5"
            required
          />
        </div>
        <div className="form-group">
          <label>–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫ (%)</label>
          <input
            type="number"
            step="0.1"
            min="0"
            max="30"
            value={formData.social_contribution}
            onChange={(e) => setFormData({...formData, social_contribution: e.target.value})}
            placeholder="22"
            required
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className="calculate-btn"
        >
          {loading ? (
            <>
              <div className="loading-spinner"></div>
              –û–±—á–∏—Å–ª–µ–Ω–Ω—è...
            </>
          ) : (
            '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏'
          )}
        </button>
      </form>
      {result && (
        <div className="calculator-result">
          <div className="result-header">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</div>
          <div className="result-value positive">
            {result.net_salary.toLocaleString('uk-UA')} –≥—Ä–Ω
          </div>
          <div className="result-details">
            <div className="result-detail">
              <span className="result-label">–í–∞–ª–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞:</span>
              <span className="result-amount">{result.gross_salary.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–ü–æ–¥–∞—Ç–æ–∫ –Ω–∞ –¥–æ—Ö–æ–¥–∏:</span>
              <span className="result-amount negative">-{result.income_tax.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä:</span>
              <span className="result-amount negative">-{result.military_tax.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫:</span>
              <span className="result-amount negative">-{result.social_contribution.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
            <div className="result-detail">
              <span className="result-label">–í—Å—å–æ–≥–æ —É—Ç—Ä–∏–º–∞–Ω–æ:</span>
              <span className="result-amount negative">-{result.total_deductions.toLocaleString('uk-UA')} –≥—Ä–Ω</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const CalculatorsPage = () => {
  const [activeTab, setActiveTab] = useState('savings');
  const [showInfo, setShowInfo] = useState(false);

  const renderCalculator = () => {
    switch (activeTab) {
      case 'savings':
        return <SavingsCalculator />;
      case 'credit':
        return <CreditCalculator />;
      case 'pension':
        return <PensionCalculator />;
      case 'tax':
        return <TaxCalculator />;
      default:
        return <SavingsCalculator />;
    }
  };

  return (
    <div className="app-layout">
      <Sidebar />
      <div className="content-container">
        <div className="calculators-container">
          <div className="page-header">
            <div>
              <h1>–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∏</h1>
              <p className="page-subtitle">
                –ü–ª–∞–Ω—É–π—Ç–µ —Å–≤–æ—î —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–µ –º–∞–π–±—É—Ç–Ω—î –∑ –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º–∏
              </p>
            </div>
            <button
              className="info-toggle-btn"
              onClick={() => setShowInfo(!showInfo)}
              title="–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
              aria-expanded={showInfo}
              aria-controls="calculator-info"
            >
              <i className="bx bx-info-circle"></i>
            </button>
          </div>

          {showInfo && (
            <div className="calculator-info" id="calculator-info">
              <h2>–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>
              <div className="info-grid">
                <div className="info-item">
                  <h3>
                    <span className="info-icon">üí∞</span> –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è
                  </h3>
                  <p>
                    –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ –º–∞–π–±—É—Ç–Ω—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—à–∏—Ö –∑–∞–æ—â–∞–¥–∂–µ–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º
                    —Å–∫–ª–∞–¥–Ω–∏—Ö –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–Ω–µ—Å–∫—ñ–≤.
                  </p>
                </div>
                <div className="info-item">
                  <h3>
                    <span className="info-icon">üè¶</span> –ö—Ä–µ–¥–∏—Ç–∏
                  </h3>
                  <p>
                    –í–∏–∑–Ω–∞—á—Ç–µ —Ä–æ–∑–º—ñ—Ä —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É, –∑–∞–≥–∞–ª—å–Ω—É –ø–µ—Ä–µ–ø–ª–∞—Ç—É
                    —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—É.
                  </p>
                </div>
                <div className="info-item">
                  <h3>
                    <span className="info-icon">üèõÔ∏è</span> –ü–µ–Ω—Å—ñ–π–Ω—ñ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
                  </h3>
                  <p>
                    –ü–ª–∞–Ω—É–π—Ç–µ —Å–≤–æ—î –ø–µ–Ω—Å—ñ–π–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é—á–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
                    –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ–Ω—Ñ–ª—è—Ü—ñ—ó —Ç–∞ –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π.
                  </p>
                </div>
                <div className="info-item">
                  <h3>
                    <span className="info-icon">üìä</span> –ü–æ–¥–∞—Ç–∫–∏
                  </h3>
                  <p>
                    –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ —á–∏—Å—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—É –ø—ñ—Å–ª—è —Å–ø–ª–∞—Ç–∏ –≤—Å—ñ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö
                    –ø–æ–¥–∞—Ç–∫—ñ–≤ —Ç–∞ –∑–±–æ—Ä—ñ–≤ –≤ –£–∫—Ä–∞—ó–Ω—ñ.
                  </p>
                </div>
              </div>
            </div>
          )}

          <div className="calculator-tabs">
            <button
              className={`calculator-tab ${activeTab === 'savings' ? 'active' : ''}`}
              onClick={() => setActiveTab('savings')}
            >
              <span className="tab-icon">üí∞</span>
              –ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è
            </button>
            <button
              className={`calculator-tab ${activeTab === 'credit' ? 'active' : ''}`}
              onClick={() => setActiveTab('credit')}
            >
              <span className="tab-icon">üè¶</span>
              –ö—Ä–µ–¥–∏—Ç
            </button>
            <button
              className={`calculator-tab ${activeTab === 'pension' ? 'active' : ''}`}
              onClick={() => setActiveTab('pension')}
            >
              <span className="tab-icon">üèõÔ∏è</span>
              –ü–µ–Ω—Å—ñ—è
            </button>
            <button
              className={`calculator-tab ${activeTab === 'tax' ? 'active' : ''}`}
              onClick={() => setActiveTab('tax')}
            >
              <span className="tab-icon">üìä</span>
              –ü–æ–¥–∞—Ç–∫–∏
            </button>
          </div>

          {renderCalculator()}
        </div>
      </div>
    </div>
  );
};

export default CalculatorsPage;